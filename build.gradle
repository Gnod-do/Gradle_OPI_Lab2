plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.6'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.barfuin.gradle.taskinfo' version '2.2.0'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.ra'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_17
}

//sourceSets {
//	main.java.srcDirs "src/main/java"
//	main.resources.srcDir "src/main/resources"
//}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springModulithVersion', "1.1.4")
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf', version: '3.2.5'

	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:3.2.2'
	implementation group: 'org.springframework.security', name: 'spring-security-web', version: '5.7.5'
	implementation group: 'org.springframework.security', name: 'spring-security-core', version: '5.7.5'
	implementation group: 'org.springframework.security', name: 'spring-security-config', version: '5.7.5'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: '3.2.2'
//	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.3'



	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.h2database:h2:2.2.224'

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
	}
}


tasks.named('test') {
	useJUnitPlatform()
}


tasks.named('processResources') {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}


tasks.register('compileCustom', JavaCompile) {
	description = 'Compilation of project source codes.'
	group = 'Custom'
	dependsOn 'classes'
}


tasks.named('bootJar') {
	archiveFileName = 'BackendApplication.jar'
}

tasks.register('buildCustom') {
	group = 'custom'
	description = 'Compilation of project source codes and packaging them into an executable jar archive.'
	dependsOn tasks.named('compileCustom'), tasks.named('bootJar')
	doLast {
		println "The project is compiled and packaged into an executable JAR file."
	}
}

tasks.register('testCustom') {
	group = 'custom'
	description = 'Running junit tests of the project'
	dependsOn tasks.named('test')
	doLast {
		println "The project has run through junit tests."
	}
}


tasks.register('cleanCustom',Delete) {
	description = 'Deleting the compiled project classes and all temporary files (if any).'
	group = 'custom'
	delete 'build'
}


tasks.register('musicCustom') {
	description = 'Play music when build is complete (build target)'
	group = 'custom'
	doLast {
		exec {
			commandLine 'cmd', '/c', 'powershell -Command "(New-Object Media.SoundPlayer \'C:\\Users\\anhdo\\OneDrive - ITMO UNIVERSITY\\SpringBoot\\SpringBootJWT\\SpringBootJWT\\music\\we-don_t-talk-anymore.wav\').PlaySync();"'
		}
	}
}


//tasks.buildCustom {
//	finalizedBy tasks.musicCustom
//}

tasks.register('altCustom') {
	description = 'Creates an alternative version of the program with changed variable and class names.'
	group = 'custom'
	doLast {
		def srcDir = file("${projectDir}/src/main/java")
		def altDir = file("${buildDir}/altDir")
		delete altDir
		altDir.mkdirs()

		copy {
			from srcDir
			into altDir
			include '**/*.java'
			filter { line ->
				line.replaceAll('OldClass', 'NewClass')
						.replaceAll('OldVariable', 'NewVariable')
			}
		}

		println "Altushki copied and replaced in ${altDir}"
	}
}

tasks.register('scpCustom') {
	group = 'custom'
	description = 'Moving the assembled project via SCP to the selected server upon completion of the build'
	dependsOn 'buildCustom'
	doLast{
		def remoteHost = 'se.ifmo.ru'
		def remoteUser = 's345132'
		def remoteDir = '~/opi'
		def jarFile = 'build/libs/BackendApplication.jar'
		def remotePort ='2222'
		def password = 'ZDBZ"&"9739'

		exec {
			commandLine 'wsl', 'sshpass', '-p', password, 'scp', '-P', remotePort, jarFile, "${remoteUser}@${remoteHost}:${remoteDir}"
		}

		println "The assembled project has been moved to the server ${remoteHost} to the directory ${remoteDir}."
	}
}

//tasks.register('history') {
//	description = 'Rollback to previous versions until a successful build is achieved.'
//	group = 'custom'
//
//	doLast {
//		def initialCommit = 'HEAD'
//		def success = false
//
//		while (!success) {
//			def currentCommit = new ByteArrayOutputStream()
//			exec {
//				commandLine 'git', 'rev-parse', 'HEAD'
//				standardOutput = currentCommit
//			}
//			currentCommit = currentCommit.toString().trim()
//
//			if (currentCommit == initialCommit) {
//				println "Reached the initial commit, no working version found."
//				break
//			}
//
//			try {
//				exec {
//					commandLine './gradlew', 'cleanProject', 'buildProject'
//				}
//				success = true
//				println "Project built successfully."
//
//				// Create a diff file for changes between working and next commit
//				def diffOutput = new ByteArrayOutputStream()
//				exec {
//					commandLine 'git', 'diff', 'HEAD', 'HEAD~1'
//					standardOutput = diffOutput
//				}
//				new File('last_working_diff.patch').text = diffOutput.toString()
//				println "Created diff file for changes."
//			} catch (Exception e) {
//				println "Build failed, rolling back to previous commit."
//				exec {
//					commandLine 'git', 'checkout', 'HEAD~1'
//				}
//			}
//		}
//	}
//}










