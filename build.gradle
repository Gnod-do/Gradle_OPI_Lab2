plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.6'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.barfuin.gradle.taskinfo' version '2.2.0'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.ra'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_17
}

//sourceSets {
//	main.java.srcDirs "src/main/java"
//	main.resources.srcDir "src/main/resources"
//}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springModulithVersion', "1.1.4")
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf', version: '3.2.5'

	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:3.2.2'
	implementation group: 'org.springframework.security', name: 'spring-security-web', version: '5.7.5'
	implementation group: 'org.springframework.security', name: 'spring-security-core', version: '5.7.5'
	implementation group: 'org.springframework.security', name: 'spring-security-config', version: '5.7.5'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: '3.2.2'
//	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.3'



	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
	}
}


tasks.named('test') {
	useJUnitPlatform()
}


tasks.named('processResources') {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}


tasks.register('compileProject', JavaCompile) {
	description = 'Compilation of project source codes.'
	group = 'Custom'
	dependsOn 'classes'
}


tasks.named('bootJar') {
	archiveFileName = 'BackendApplication.jar'
}

//Dang co van de can sua
tasks.register('buildProject', Jar) {
	description = 'Compilation of project source codes and packaging them into an executable jar archive.'
	group = 'Custom'
	dependsOn 'bootJar'

//	archiveFileName = 'BackendApplication.jar'
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from {
		configurations.runtimeClasspath.collect {it.isDirectory() ? it : zipTree(it)}
	}
	from sourceSets.main.output
	manifest {
		attributes(
				'Main-Class': 'com.ra.SpringBootJWT.SpringBootJwtApplication'
		)
	}
}

tasks.register('cleanProject',Delete) {
	description = 'Deleting the compiled project classes and all temporary files (if any).'
	group = 'custom'
	delete 'build'
}



